---
- name: "Docker Installation on windows Node"
  hosts: windows

  vars:
    setup_firewall_rules: false
    nuget_minimum_version: 2.8.5.201
    expected_nuget_minimum_version: 2.8.5.201
    powershellget:
      minimum_version: 2.2.5
    docker:
      install_reboot_timeout: 1200
      version: latest
      firewallprofile: Domain
    powershell: 
      msi_address: https://github.com/PowerShell/PowerShell/releases/download/v7.1.3/PowerShell-7.1.3-win-x64.msi
      product_id: '{6488FC90-3CAB-4246-A212-1AD7BDE685F7}'
      install_reboot_timeout: 600

  handlers:
    - name: Restart server following Docker changes
      win_reboot:
        reboot_timeout: "{{ docker.install_reboot_timeout }}"

  tasks:
  # tasks file for windows-docker-role
  - name: Update Powershell (ignore 1603)
    ansible.windows.win_package:
      path: "{{ powershell.msi_address }}"
      product_id: "{{ powershell.product_id }}"
    register: powershell_res
    failed_when: powershell_res.rc != 0 and powershell_res.rc != 1603

  - name: Reboot if required
    win_reboot:
      reboot_timeout: "{{ powershell.install_reboot_timeout }}"
    when: powershell_res.reboot_required

  - name: Check nuget is installed
    win_shell: Get-PackageProvider Nuget -ListAvailable
    register: nuget_check
    changed_when: false
    ignore_errors: true
    
  - name: Ensure Nuget is installed
    win_shell: |
      $result = Install-PackageProvider -Name NuGet -MinimumVersion 2.8.5.201 -Force
      $exitCode = $?
      if($exitCode -eq "0") {
        $installedVersion = [System.Version]($result)[0].Version
        $minSupportedVersion = [System.Version]"{{expected_nuget_minimum_version}}"
        echo "$installedVersion > $minSupportedVersion"
        if($installedVersion -gt $minSupportedVersion) {
          exit 0
        } else {
          exit 1
        }
      } else {
        exit $exitCode
      }
    register: nuget_res
    when: nuget_check.stderr != ""


  - name: Ensure PowerShellGet is installed
    win_psmodule:
      name: "PowerShellGet"
      minimum_version: "{{ powershellget.minimum_version }}"

  - name: Ensure DockerMsftProvider is installed
    win_psmodule:
      name: "DockerMsftProvider"
      repository: "PSGallery"

  - name: Creating a k named directory"
    win_file:
      path: c:\k
      state: "directory"

  - name: Download Docker installation script
    win_get_url:
      url: https://raw.githubusercontent.com/microsoft/Windows-Containers/Main/helpful_tools/Install-DockerCE/install-docker-ce.ps1
      dest: c:\k\install-docker-ce.ps1

  - name: Run Docker installation script
    win_shell: c:\k\install-docker-ce.ps1 
    register: docker_installation_output
    notify:
      - Restart server following Docker changes
    register: docker_installation_output

  - name: "Checking docker_installation_output"
    debug:
      var: docker_installation_output

  - name: Make certificate directories
    win_file:
      path: "{{ item }}"
      state: directory
    loop:
      - C:\Docker-SSL\client\.docker
      - C:\Docker-SSL\server

  - name: Open necessary ports
    win_shell: |
      Import-Module NetSecurity
      $prot = "{{ item.protocol }}"
      $port = "{{ item.port }}"
      [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Profile] $profile = "{{ item.profile }}"
      [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Direction] $direction = "{{ item.direction }}"
      $name = "{{ item.name }}"

      [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Direction] $inbound = "Inbound"
      [bool] $found = $false


      $portfilters = (Get-NetFirewallPortFilter | Where-Object {$_.LocalPort -eq $port})
      foreach($portfilter in $portfilters)
      {
          $rule = ($portfilter | Get-NetFirewallRule)
          if(
              $rule.DisplayName -eq $name -And
              $rule.Enabled -eq $true -And
              $rule.Action -eq "Allow" -And
              $rule.Direction.CompareTo($direction) -eq 0 -And
              $rule.Profile.CompareTo($profile) -eq 0
          )
          {
              $found = $true
          }
      }

      if(!$found)
      {
          echo "${direction} ${port}/${prot} ${profile}: Not found, adding!"
          New-NetFirewallRule -DisplayName $name -LocalPort $port -Profile $profile -Direction $direction -Protocol $prot
          $res = $?
          if($res -eq $true)
          {
            exit 0
          }
          else
          {
            exit 2
          }
      }
      else
      {
          echo "${direction} ${port}/${prot} ${profile}: Found!"
          exit 1
      }
    loop:
      - { port: 2376, protocol: "TCP", profile: "{{ docker.firewallprofile }}", direction: "Inbound", name: "Docker TLS port"}
      - { port: 2377, protocol: "TCP", profile: "{{ docker.firewallprofile }}", direction: "Inbound", name: "Docker cluster management communications"}
      - { port: 7946, protocol: "TCP", profile: "{{ docker.firewallprofile }}", direction: "Inbound", name: "Docker node communications (TCP)" }
      - { port: 7946, protocol: "UDP", profile: "{{ docker.firewallprofile }}", direction: "Inbound", name: "Docker node communications (UDP)" }
      - { port: 4789, protocol: "UDP", profile: "{{ docker.firewallprofile }}", direction: "Inbound", name: "Docker overlay network traffic" }
      - { port: 2376, protocol: "TCP", profile: "{{ docker.firewallprofile }}", direction: "Outbound", name: "Docker TLS port"}
      - { port: 2377, protocol: "TCP", profile: "{{ docker.firewallprofile }}", direction: "Outbound", name: "Docker cluster management communications"}
      - { port: 7946, protocol: "TCP", profile: "{{ docker.firewallprofile }}", direction: "Outbound", name: "Docker node communications (TCP)" }
      - { port: 7946, protocol: "UDP", profile: "{{ docker.firewallprofile }}", direction: "Outbound", name: "Docker node communications (UDP)" }
      - { port: 4789, protocol: "UDP", profile: "{{ docker.firewallprofile }}", direction: "Outbound", name: "Docker overlay network traffic" }
    changed_when: firewall_res.rc == 0
    failed_when: firewall_res.rc == 2
    register: firewall_res
    when: setup_firewall_rules | bool

  - name: Flush handlers to reboot if necessary.
    meta: flush_handlers

  - name: Make sure docker is started
    win_service:
      name: Docker
      state: started

  - name: "Copy kubeconfig file to k folder"
    win_copy:
      src: "/root/kubeconfig"
      dest: c:\k\kubeconfig

  - name: "Download the script"
    win_get_url:
      url: "https://raw.githubusercontent.com/swapnil-nirmata/windows-nodes/main/Windows-Setup-V1-21.ps1"
      dest: c:\k\Windows-Setup-V1-21.ps1

  - name: "Execute the script"
    win_shell: c:\k\Windows-Setup-V1-21.ps1
    register: storing_script_output

  - name: "Verifying the script output & node addition status"
    debug:
      var: storing_script_output